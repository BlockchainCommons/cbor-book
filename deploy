#!/usr/bin/env bash

set -euo pipefail

BOOK_DIR="$(basename "$PWD")"
DEPLOY_DIR="/tmp/book-deploy"

# Ensure we're inside a Git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "❌ Error: not inside a Git repository."
  exit 1
fi

# Ensure clean working tree
if [[ -n "$(git status --porcelain)" ]]; then
  echo "❌ Working directory is not clean. Please commit or stash your changes before deploying."
  exit 1
fi

# Ensure gh-pages exists remotely
if ! git ls-remote --exit-code --heads origin gh-pages >/dev/null; then
  echo "❌ The 'gh-pages' branch does not exist on origin. Run './setup-deploy' first."
  exit 1
fi

# Ensure the local ref to origin/gh-pages exists
if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
  echo "🔄 Fetching 'gh-pages' from origin..."
  git fetch origin gh-pages
fi

# Build the book
echo "📖 Building mdBook..."
mdbook build

# Clean up any prior worktree
rm -rf "$DEPLOY_DIR"

# Add gh-pages worktree
echo "🌿 Creating temporary worktree for gh-pages..."
git worktree add -B gh-pages "$DEPLOY_DIR" origin/gh-pages

# Sync book output to gh-pages worktree
echo "📦 Syncing book output to deployment directory..."
rsync -a --delete book/ "$DEPLOY_DIR/"
touch "$DEPLOY_DIR/.nojekyll"

# Check for actual changes
pushd "$DEPLOY_DIR" >/dev/null
if git diff --quiet --exit-code; then
  echo "🟡 No changes since last deploy. Skipping commit and push."
else
  echo "🚀 Changes detected. Committing and pushing..."
  git add .
  git commit -m "Deploy $BOOK_DIR: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
  git push origin gh-pages
fi
popd >/dev/null

# Remove the temporary worktree
echo "🧹 Cleaning up worktree..."
git worktree remove "$DEPLOY_DIR"

echo "✅ Deploy script completed."
