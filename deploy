#!/usr/bin/env bash

set -euo pipefail

BOOK_DIR="$(basename "$PWD")"
DEPLOY_DIR="/tmp/book-deploy"

# Ensure we are in a Git repo
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "❌ Not inside a Git repository."
  exit 1
fi

# Ensure clean working directory
if [[ -n "$(git status --porcelain)" ]]; then
  echo "❌ Working directory is not clean. Please commit or stash changes first."
  exit 1
fi

# Ensure gh-pages exists on remote
if ! git ls-remote --exit-code --heads origin gh-pages >/dev/null; then
  echo "❌ The 'gh-pages' branch does not exist on origin. Run './setup-deploy' first."
  exit 1
fi

# Fetch gh-pages if not locally known
if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
  echo "🔄 Fetching 'gh-pages' from origin..."
  git fetch origin gh-pages
fi

# Build the book
echo "📖 Building mdBook..."
mdbook build

# If worktree already exists, remove it safely
if git worktree list | grep -q "$DEPLOY_DIR"; then
  echo "🧹 Cleaning up existing worktree..."
  git worktree remove --force "$DEPLOY_DIR"
fi

# Add fresh worktree
echo "🌿 Creating worktree for gh-pages..."
git worktree add -B gh-pages "$DEPLOY_DIR" origin/gh-pages

# Compare book/ to worktree contents using rsync dry-run
echo "🔍 Checking for changes..."
if ! rsync -a --delete --dry-run --exclude='.git' --exclude='.gitignore' book/ "$DEPLOY_DIR/" | grep -q .; then
  echo "🟡 No changes to publish. Skipping deployment."
  git worktree remove "$DEPLOY_DIR"
  exit 0
fi

# Sync contents safely (preserving .git metadata)
echo "📦 Syncing new content..."
rsync -a --delete --exclude='.git' --exclude='.gitignore' book/ "$DEPLOY_DIR/"
touch "$DEPLOY_DIR/.nojekyll"

# Commit and push
echo "🚀 Committing and pushing changes..."
pushd "$DEPLOY_DIR" >/dev/null
git add .
git commit -m "Deploy $BOOK_DIR: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
git push origin gh-pages
popd >/dev/null

# Cleanup
echo "🧹 Final cleanup..."
git worktree remove "$DEPLOY_DIR"

echo "✅ Successfully deployed $BOOK_DIR to GitHub Pages."
